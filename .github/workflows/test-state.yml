name: Test Remote State Creation

on:
  workflow_dispatch: {} # Allows manual triggering

permissions:
  contents: read

jobs:
  test-remote-state:
    runs-on: ubuntu-latest
    env:
      # Use the same secrets as your other workflows
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      TF_STATE_KEY: "test-newsapp.tfstate" # Use a different key to avoid conflicts
      OS_NAMESPACE: ${{ secrets.OS_NAMESPACE }}
      OCI_REGION: ${{ secrets.OCI_REGION }}
      OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
      OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
      OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
      OCI_PRIVATE_KEY_PEM: ${{ secrets.OCI_PRIVATE_KEY_PEM }}
      
    steps:
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      - name: Create Dummy Terraform Files
        run: |
          # 1. Define the OCI backend
          cat > backend.tf <<'HCL'
          terraform {
            backend "oci" {}
          }
          HCL
          
          # 2. Create a resource that does nothing but creates state
          cat > main.tf <<'HCL'
          resource "null_resource" "test_state_creation" {}
          HCL

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="namespace=$OS_NAMESPACE" \
            -backend-config="region=$OCI_REGION" \
            -backend-config="tenancy_ocid=$OCI_TENANCY_OCID" \
            -backend-config="user_ocid=$OCI_USER_OCID" \
            -backend-config="fingerprint=$OCI_FINGERPRINT" \
            -backend-config="private_key_pem=$OCI_PRIVATE_KEY_PEM"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Verify State File Creation
        run: echo "âœ… Apply successful. Check the '${TF_STATE_BUCKET}' bucket in OCI for the file '${TF_STATE_KEY}'."