name: Reusable Terraform Workflow

on:
  workflow_call:
    inputs:
      workspace-path:
        required: true
        type: string
        description: "Path to the Terraform workspace (e.g., terraform/2-stack)"
      action:
        required: true
        type: string
        description: "Terraform action to perform (plan, apply, or destroy)"
    secrets:
      OCI_TENANCY_OCID:
        required: true
      OCI_USER_OCID:
        required: true
      OCI_FINGERPRINT:
        required: true
      OCI_REGION:
        required: true
      OCI_PRIVATE_KEY_PEM:
        required: true
      TF_STATE_BUCKET:
        required: true
      OS_NAMESPACE:
        required: true
      COMPARTMENT_OCID:
        required: false
      AVAILABILITY_DOMAIN:
        required: false
      OS_IMAGE_ID:
        required: false
      BASTION_IMAGE:
        required: false
      CLUSTER_NAME:
        required: false
      ADMIN_CIDRS:
        required: false
      CLOUDFLARE_CIDRS:
        required: false
      CLOUDFLARE_API_TOKEN:
        required: false
      CLOUDFLARE_ZONE_ID:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_REGION:
        required: false
      AWS_BUCKET:
        required: false
      STORAGE_TYPE:
        required: false
      SEALED_SECRETS_CERT:
        required: false
      SEALED_SECRETS_KEY:
        required: false
      DB_STORAGE_OCID:
        required: false
      MANIFESTS_REPO_URL:
        required: false
      TF_STATE_KEY:
        required: false

jobs:
  terraform:
    name: "Terraform ${{ inputs.action }}"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.workspace-path }}

    env:
      # Define the full environment block ONCE. Standardized to non-prefixed names.
      TF_IN_AUTOMATION: "1"
      TF_INPUT: "0"
      TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_region: ${{ secrets.OCI_REGION }}
      TF_VAR_private_key_pem: ${{ secrets.OCI_PRIVATE_KEY_PEM }}
      TF_VAR_compartment_ocid: ${{ secrets.COMPARTMENT_OCID }}
      TF_VAR_availability_domain: ${{ secrets.AVAILABILITY_DOMAIN }}
      TF_VAR_os_image_id: ${{ secrets.OS_IMAGE_ID }}
      TF_VAR_cluster_name: ${{ secrets.CLUSTER_NAME }}
      TF_VAR_admin_cidrs: ${{ secrets.ADMIN_CIDRS }}
      TF_VAR_cloudflare_cidrs: ${{ secrets.CLOUDFLARE_CIDRS }}
      TF_VAR_tf_state_bucket: ${{ secrets.TF_STATE_BUCKET }}
      TF_VAR_tf_state_key: ${{ secrets.TF_STATE_KEY }}
      TF_VAR_os_namespace: ${{ secrets.OS_NAMESPACE }}
      TF_VAR_bastion_os_image_id: ${{ secrets.BASTION_IMAGE }}
      TF_VAR_manifests_repo_url: ${{ secrets.MANIFESTS_REPO_URL }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_aws_bucket: ${{ secrets.AWS_BUCKET }}
      TF_VAR_storage_type: ${{ secrets.STORAGE_TYPE }}
      TF_VAR_sealed_secrets_cert: ${{ secrets.SEALED_SECRETS_CERT }}
      TF_VAR_sealed_secrets_key: ${{ secrets.SEALED_SECRETS_KEY }}
      TF_VAR_db_storage_ocid: ${{ secrets.DB_STORAGE_OCID }}
      TF_VAR_storage_state_key: "storage.tfstate" # Default for main stack

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      - name: Terraform Init
        run: |
          # Use default backend key unless one is explicitly provided
          STATE_KEY=${{ secrets.TF_STATE_KEY || format('{0}.tfstate', inputs.workspace-path) }}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=$STATE_KEY" \
            -backend-config="namespace=${{ secrets.OS_NAMESPACE }}" \
            -backend-config="region=${{ secrets.OCI_REGION }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: inputs.action == 'plan' || inputs.action == 'apply'
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: inputs.action == 'apply'
        run: terraform apply -auto-approve -input=false tfplan

      - name: Terraform Destroy
        if: inputs.action == 'destroy'
        run: terraform destroy -auto-approve -input=false