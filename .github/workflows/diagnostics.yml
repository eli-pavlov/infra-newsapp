name: OCI & Terraform Diagnostics

on:
  workflow_dispatch: {} # Allows manual triggering

permissions:
  contents: read

jobs:
  diagnose:
    runs-on: ubuntu-latest
    env:
      # These secrets are loaded into the environment for the diagnostic steps
      TF_VAR_tenancy_ocid:        ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid:           ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint:         ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_region:              ${{ secrets.OCI_REGION }}
      TF_VAR_private_key_pem:     ${{ secrets.OCI_PRIVATE_KEY_PEM }}
      TF_VAR_compartment_ocid:    ${{ secrets.COMPARTMENT_OCID }}
      TF_VAR_availability_domain: ${{ secrets.AVAILABILITY_DOMAIN }}
      TF_VAR_os_image_id:         ${{ secrets.OS_IMAGE_ID }}
      TF_VAR_bastion_os_image_id:   ${{ secrets.BASTION_IMAGE }}
      ADMIN_CIDRS:                ${{ secrets.ADMIN_CIDRS }}
      CLOUDFLARE_CIDRS:           ${{ secrets.CLOUDFLARE_CIDRS }}
      SSH_PUBLIC_KEY:             ${{ secrets.SSH_PUBLIC_KEY }}
      TF_STATE_BUCKET:            ${{ secrets.TF_STATE_BUCKET }}
      TF_STATE_KEY:               ${{ secrets.TF_STATE_KEY }}
      OS_NAMESPACE:               ${{ secrets.OS_NAMESPACE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install tools (jq, oci-cli, openssl)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq openssl
          pip install --quiet oci-cli

      - name: 1. Display Critical Variables (Secrets are Masked)
        shell: bash
        run: |
          echo "### Critical Terraform Variables ###"
          echo "------------------------------------"
          echo "OCI Region:               '${TF_VAR_region}'"
          echo "Availability Domain:      '${TF_VAR_availability_domain}'"
          echo "Compartment OCID:         '${TF_VAR_compartment_ocid}'"
          echo "OS Image OCID:            '${TF_VAR_os_image_id}'"
          echo "Bastion Image OCID:       '${TF_VAR_bastion_os_image_id}'"
          echo "State Bucket Name:        '${TF_STATE_BUCKET}'"
          echo "Object Storage Namespace: '${OS_NAMESPACE}'"
          echo "---"
          echo "Tenancy OCID:             '${TF_VAR_tenancy_ocid}'"
          echo "User OCID:                '${TF_VAR_user_ocid}'"
          echo "Fingerprint:              '${TF_VAR_fingerprint}'"
          echo "------------------------------------"
          
          # Validate presence and basic format of sensitive secrets without printing them
          if [ -n "${TF_VAR_private_key_pem}" ]; then
            echo "✅ OCI Private Key is SET."
          else
            echo "❌ ERROR: OCI Private Key is NOT SET."
          fi
          if [ -n "${SSH_PUBLIC_KEY}" ]; then
            echo "✅ SSH Public Key is SET."
          else
            echo "❌ ERROR: SSH Public Key is NOT SET."
          fi

      - name: 2. Validate CIDR JSON Format
        shell: bash
        run: |
          echo "### Validating CIDR formats ###"
          set -euo pipefail
          
          validate_cidr_json() {
            local secret_name="$1"
            local secret_value="$2"
            if [ -z "${secret_value}" ]; then
              echo "❌ ERROR: Secret '${secret_name}' is not set."
              return 1
            fi
            echo "${secret_value}" | jq -e 'type=="array" and length > 0 and all(.[]; type=="string")' >/dev/null
            if [ $? -eq 0 ]; then
              echo "✅ ${secret_name} is a valid JSON array of strings."
            else
              echo "❌ ERROR: ${secret_name} is NOT a valid JSON array of strings."
              echo "   Example format: [\"1.2.3.4/32\", \"5.6.7.8/32\"]"
              return 1
            fi
          }
          
          validate_cidr_json "ADMIN_CIDRS" "${ADMIN_CIDRS}"
          validate_cidr_json "CLOUDFLARE_CIDRS" "${CLOUDFLARE_CIDRS}"
          echo "------------------------------------"

      - name: 3. Test OCI API Credentials
        shell: bash
        run: |
          echo "### Testing OCI API Authentication ###"
          set -euo pipefail
          mkdir -p "$HOME/.oci"
          umask 077
          echo -e "${TF_VAR_private_key_pem}" > "$HOME/.oci/oci_api_key.pem"
          
          echo "Checking private key format with OpenSSL..."
          openssl rsa -in "$HOME/.oci/oci_api_key.pem" -check -noout
          echo "✅ OpenSSL key check passed."

          cat > "$HOME/.oci/config" <<CFG
          [DEFAULT]
          user=${TF_VAR_user_ocid}
          fingerprint=${TF_VAR_fingerprint}
          tenancy=${TF_VAR_tenancy_ocid}
          region=${TF_VAR_region}
          key_file=$HOME/.oci/oci_api_key.pem
          CFG
          
          echo "Attempting to authenticate with OCI CLI..."
          oci os ns get
          echo "✅ OCI CLI authentication successful."
          echo "------------------------------------"

      - name: 4. Check Terraform Configuration
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1
          terraform_wrapper: false

      - name: 5. Run Terraform Init and Validate
        shell: bash
        run: |
          echo "### Initializing and Validating Terraform ###"
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="namespace=${OS_NAMESPACE}" \
            -backend-config="region=${TF_VAR_region}"
          
          echo "---"
          terraform validate
          echo "✅ Terraform configuration is valid."
          echo "------------------------------------"
