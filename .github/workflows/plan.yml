name: plan
on:
  workflow_dispatch: {}
  push:
    branches: [ main, master, development ]

permissions:
  contents: read

jobs:
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      TF_IN_AUTOMATION: "1"
      TF_INPUT: "0"
      TF_VAR_tenancy_ocid:        ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid:           ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint:         ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_region:              ${{ secrets.OCI_REGION }}
      TF_VAR_private_key_pem:     ${{ secrets.OCI_PRIVATE_KEY_PEM }}
      TF_VAR_compartment_ocid:    ${{ secrets.COMPARTMENT_OCID }}
      TF_VAR_availability_domain: ${{ secrets.AVAILABILITY_DOMAIN }}
      TF_VAR_os_image_id:         ${{ secrets.OS_IMAGE_ID }}
      TF_VAR_cluster_name:        ${{ secrets.CLUSTER_NAME }}
      TF_VAR_admin_cidrs:         ${{ secrets.ADMIN_CIDRS }}
      TF_VAR_cloudflare_cidrs:    ${{ secrets.CLOUDFLARE_CIDRS }}
      TF_VAR_public_key_content:  ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_tf_state_bucket:     ${{ secrets.TF_STATE_BUCKET }}
      TF_VAR_os_namespace:        ${{ secrets.OS_NAMESPACE }}
      TF_VAR_bastion_os_image_id: ${{ secrets.BASTION_IMAGE }}
      TF_VAR_manifests_repo_url:  ${{ secrets.MANIFESTS_REPO_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false

      - name: Guard required secrets
        shell: bash
        run: |
          set -euo pipefail
          missing=0
          for v in OCI_TENANCY_OCID OCI_USER_OCID OCI_FINGERPRINT OCI_REGION OCI_PRIVATE_KEY_PEM COMPARTMENT_OCID TF_STATE_BUCKET OCI_S3_ACCESS_KEY_ID OCI_S3_SECRET_ACCESS_KEY; do
            if [ -z "${{ secrets[v] }}" ]; then echo "::error::Missing secret: $v"; missing=1; fi
          done
          [ "$missing" -eq 0 ] || exit 1

      - name: Install & configure OCI CLI (for namespace/bucket check)
        shell: bash
        run: |
          python3 -m pip install --quiet --upgrade pip
          python3 -m pip install --quiet oci-cli
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          mkdir -p "$HOME/.oci"
          umask 077
          printf "%s" "${{ secrets.OCI_PRIVATE_KEY_PEM }}" > "$HOME/.oci/oci_api_key.pem"
          cat > "$HOME/.oci/config" <<CFG
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          key_file=$HOME/.oci/oci_api_key.pem
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          CFG

      - name: Compute namespace & default TF state key
        shell: bash
        run: |
          set -euo pipefail
          # Namespace: prefer secret, else fetch
          NS="${{ secrets.OS_NAMESPACE }}"
          if [ -z "$NS" ]; then
            NS="$(oci os ns get --query 'data' --raw-output)"
          fi
          echo "OS_NAMESPACE=$NS" >> "$GITHUB_ENV"

          # State key: prefer secret TF_STATE_KEY, else repo/branch default
          KEY="${{ secrets.TF_STATE_KEY }}"
          if [ -z "$KEY" ]; then
            KEY="${GITHUB_REPOSITORY//\//-}/${GITHUB_REF_NAME//\//-}.tfstate"
          fi
          echo "TF_STATE_KEY=$KEY" >> "$GITHUB_ENV"

      - name: Ensure state bucket exists (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          if ! oci os bucket get -ns "$OS_NAMESPACE" --name "${{ secrets.TF_STATE_BUCKET }}" >/dev/null 2>&1; then
            oci os bucket create -ns "$OS_NAMESPACE" --name "${{ secrets.TF_STATE_BUCKET }}" \
              --compartment-id "${{ secrets.COMPARTMENT_OCID }}" >/dev/null
          fi

      - name: Create backend.s3.hcl (OCI S3-compatible)
        shell: bash
        run: |
          cat > backend.s3.hcl <<HCL
          bucket                      = "${{ secrets.TF_STATE_BUCKET }}"
          key                         = "${TF_STATE_KEY}"
          region                      = "${{ secrets.OCI_REGION }}"
          endpoint                    = "https://${OS_NAMESPACE}.compat.objectstorage.${{ secrets.OCI_REGION }}.oraclecloud.com"
          access_key                  = "${{ secrets.OCI_S3_ACCESS_KEY_ID }}"
          secret_key                  = "${{ secrets.OCI_S3_SECRET_ACCESS_KEY }}"
          skip_region_validation      = true
          skip_credentials_validation = true
          skip_metadata_api_check     = true
          skip_requesting_account_id  = true
          force_path_style            = true
          workspace_key_prefix        = "envs/"
          HCL

      - name: Terraform init (S3 backend on OCI)
        run: terraform init -backend-config=backend.s3.hcl -reconfigure -input=false -upgrade

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan -out=tfplan -input=false -lock-timeout=5m

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
          if-no-files-found: error
