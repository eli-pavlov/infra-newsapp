name: Test Remote State Creation

on:
  workflow_dispatch: {} # Allows manual triggering
  push:
    branches: [ main, master, development ]

permissions:
  contents: read

jobs:
  test-remote-state:
    runs-on: ubuntu-latest
    env:
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      TF_STATE_KEY: "test-newsapp.tfstate"
      OS_NAMESPACE: ${{ secrets.OS_NAMESPACE }}
      OCI_REGION: ${{ secrets.OCI_REGION }}
      OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
      OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
      OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
      
    steps:
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      - name: Create Dummy Terraform Files
        run: |
          # Define the OCI backend using a multi-line heredoc for correct syntax
          cat > backend.tf <<'HCL'
          terraform {
            backend "oci" {}
          }
          HCL
          
          # Create a minimal resource to generate a state file
          echo 'resource "null_resource" "test_state_creation" {}' > main.tf

      - name: Write OCI Private Key to a temporary file
        run: |
          # Use umask to ensure the key file is created with restrictive permissions
          umask 077
          # Use printf for safer handling of the multi-line secret string
          printf "%s" "${{ secrets.OCI_PRIVATE_KEY_PEM }}" > "$RUNNER_TEMP/oci_api_key.pem"
          # Set the file path as an environment variable for the next step
          echo "OCI_KEY_PATH=$RUNNER_TEMP/oci_api_key.pem" >> $GITHUB_ENV

      - name: Create backend.oci.hcl for Terraform Init
        run: |
          # Generate the backend configuration file using the secrets and the key path
          cat > backend.oci.hcl <<HCL
          bucket               = "$TF_STATE_BUCKET"
          key                  = "$TF_STATE_KEY"
          namespace            = "$OS_NAMESPACE"
          region               = "$OCI_REGION"
          tenancy_ocid         = "$OCI_TENANCY_OCID"
          user_ocid            = "$OCI_USER_OCID"
          fingerprint          = "$OCI_FINGERPRINT"
          private_key_path     = "${{ env.OCI_KEY_PATH }}"
          HCL

      - name: Terraform Init
        run: |
          # Initialize using the generated backend configuration file
          terraform init -backend-config=backend.oci.hcl

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Verify State File Creation
        run: echo "âœ… Apply successful. Check the '${TF_STATE_BUCKET}' bucket in OCI for the file '${TF_STATE_KEY}'."

