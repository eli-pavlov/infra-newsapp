name: Test Remote State Creation

on:
  workflow_dispatch: {} # Allows manual triggering

permissions:
  contents: read

jobs:
  test-remote-state:
    runs-on: ubuntu-latest
    env:
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      TF_STATE_KEY: "test-newsapp.tfstate"
      OS_NAMESPACE: ${{ secrets.OS_NAMESPACE }}
      OCI_REGION: ${{ secrets.OCI_REGION }}
      OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
      OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
      OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
      
    steps:
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      - name: Create Dummy Terraform Files
        run: |
          # Define the OCI backend using a multi-line heredoc for correct syntax
          cat > backend.tf <<'HCL'
          terraform {
            backend "oci" {}
          }
          HCL
          
          # Create a minimal resource to generate a state file
          echo 'resource "null_resource" "test_state_creation" {}' > main.tf

      - name: Configure OCI CLI Credentials
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.oci"
          umask 077
          # Write the private key to the standard location
          printf "%s" "${{ secrets.OCI_PRIVATE_KEY_PEM }}" > "$HOME/.oci/oci_api_key.pem"
          # Write the OCI config file, pointing to the key file
          cat > "$HOME/.oci/config" <<CFG
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=$HOME/.oci/oci_api_key.pem
          CFG
          echo "OCI configuration file created."

      - name: Terraform Init
        run: |
          # Initialize using backend config arguments.
          # Authentication is now handled automatically via the ~/.oci/config file.
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="namespace=$OS_NAMESPACE" \
            -backend-config="region=$OCI_REGION"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Verify State File Creation
        run: echo "âœ… Apply successful. Check the '${TF_STATE_BUCKET}' bucket in OCI for the file '${TF_STATE_KEY}'."

