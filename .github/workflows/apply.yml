name: 'Apply'

on:
  workflow_dispatch:
    inputs:
      plan-artifact-run-id:
        description: 'The Run ID of the "plan" workflow that generated the artifact to apply.'
        required: true

permissions:
  contents: read
  actions: read # Required to download artifacts from other workflow runs

concurrency:
  group: 'terraform-apply'
  cancel-in-progress: false

jobs:
  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_IN_AUTOMATION: "1"
      TF_INPUT: "0"
      # Secrets are needed for the provider in the apply job
      TF_VAR_tenancy_ocid:        ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid:           ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint:         ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_region:              ${{ secrets.OCI_REGION }}
      TF_VAR_private_key_pem:     ${{ secrets.OCI_PRIVATE_KEY_PEM }}
      TF_VAR_compartment_ocid:    ${{ secrets.COMPARTMENT_OCID }}
      TF_VAR_availability_domain: ${{ secrets.AVAILABILITY_DOMAIN }}
      TF_VAR_os_image_id:         ${{ secrets.OS_IMAGE_ID }}
      TF_VAR_cluster_name:        ${{ secrets.CLUSTER_NAME }}
      TF_VAR_admin_cidrs:         ${{ secrets.ADMIN_CIDRS }}
      TF_VAR_cloudflare_cidrs:    ${{ secrets.CLOUDFLARE_CIDRS }}
      TF_VAR_public_key_content:  ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_tf_state_bucket:     ${{ secrets.TF_STATE_BUCKET }}
      TF_VAR_os_namespace:        ${{ secrets.OS_NAMESPACE }}
      TF_VAR_bastion_os_image_id:   ${{ secrets.BASTION_IMAGE }}
      TF_VAR_manifests_repo_url:    ${{ secrets.MANIFESTS_REPO_URL }}
    steps:
      - name: Download plan artifact from the specific workflow run
        uses: dawidd6/action-download-artifact@v3
        with:
          name: tfplan
          run_id: ${{ github.event.inputs['plan-artifact-run-id'] }}

      - name: Read plan metadata
        id: meta
        run: |
          test -f plan-meta.json || { echo "::error::plan-meta.json not found in artifact"; exit 1; }
          echo "sha=$(jq -r .commit plan-meta.json)" >> "$GITHUB_OUTPUT"

      - name: Checkout planned commit
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.meta.outputs.sha }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1
          terraform_wrapper: false

      - name: Configure OCI Credentials
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.oci"
          umask 077
          echo -e "${{ secrets.OCI_PRIVATE_KEY_PEM }}" > "$HOME/.oci/oci_api_key.pem"
          cat > "$HOME/.oci/config" <<CFG
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=$HOME/.oci/oci_api_key.pem
          CFG

      - name: Ensure Terraform version matches the plan
        run: |
          PLAN_TF=$(jq -r .terraform_version plan-meta.json)
          CURR_TF=$(terraform version -json | jq -r .terraform_version)
          if [ "$PLAN_TF" != "$CURR_TF" ]; then
            echo "::error::Terraform version mismatch. Planned with $PLAN_TF but runner has $CURR_TF"
            exit 1
          fi

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="namespace=${{ secrets.OS_NAMESPACE }}" \
            -backend-config="region=${{ secrets.OCI_REGION }}"

      - name: Terraform Apply
        run: terraform apply -input=false tfplan
