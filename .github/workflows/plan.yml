name: plan
on:
  workflow_dispatch: {}
  push:
    branches: [ main, master, development ]

permissions:
  contents: read

jobs:
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      TF_IN_AUTOMATION: "1"
      TF_INPUT: "0"
      # These TF_VARs are used by the OCI provider during the plan phase
      TF_VAR_tenancy_ocid:        ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid:           ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint:         ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_region:              ${{ secrets.OCI_REGION }}
      TF_VAR_private_key_pem:     ${{ secrets.OCI_PRIVATE_KEY_PEM }}
      TF_VAR_compartment_ocid:    ${{ secrets.COMPARTMENT_OCID }}
      TF_VAR_availability_domain: ${{ secrets.AVAILABILITY_DOMAIN }}
      TF_VAR_os_image_id:         ${{ secrets.OS_IMAGE_ID }}
      TF_VAR_cluster_name:        ${{ secrets.CLUSTER_NAME }}
      TF_VAR_admin_cidrs:         ${{ secrets.ADMIN_CIDRS }}
      TF_VAR_cloudflare_cidrs:    ${{ secrets.CLOUDFLARE_CIDRS }}
      TF_VAR_tf_state_bucket:     ${{ secrets.TF_STATE_BUCKET }}
      TF_VAR_tf_state_key:        ${{ secrets.TF_STATE_KEY }}
      TF_VAR_os_namespace:        ${{ secrets.OS_NAMESPACE }}
      TF_VAR_bastion_os_image_id: ${{ secrets.BASTION_IMAGE }}
      TF_VAR_manifests_repo_url:  ${{ secrets.MANIFESTS_REPO_URL }}
      TF_VAR_cloudflare_api_token:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_zone_id:    ${{ secrets.CLOUDFLARE_ZONE_ID }}
      TF_VAR_aws_access_key_id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_aws_region:            ${{ secrets.AWS_REGION }}
      TF_VAR_aws_bucket:            ${{ secrets.AWS_BUCKET }} 
      TF_VAR_storage_type:          ${{ secrets.STORAGE_TYPE }}
      TF_VAR_sealed_secrets_cert:   ${{ secrets.SEALED_SECRETS_CERT }}
      TF_VAR_sealed_secrets_key:    ${{ secrets.SEALED_SECRETS_KEY }}

    steps:
      - name: Guard required secrets (including TF_STATE_KEY)
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.OCI_TENANCY_OCID }}" ] || \
             [ -z "${{ secrets.OCI_USER_OCID }}" ] || \
             [ -z "${{ secrets.OCI_FINGERPRINT }}" ] || \
             [ -z "${{ secrets.OCI_REGION }}" ] || \
             [ -z "${{ secrets.OCI_PRIVATE_KEY_PEM }}" ] || \
             [ -z "${{ secrets.TF_STATE_BUCKET }}" ] || \
             [ -z "${{ secrets.TF_STATE_KEY }}" ] || \
             [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || \
             [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || \
             [ -z "${{ secrets.AWS_REGION }}" ] || \
             [ -z "${{ secrets.AWS_BUCKET }}" ] || \
             [ -z "${{ secrets.STORAGE_TYPE }}" ] || \
             [ -z "${{ secrets.SEALED_SECRETS_CERT }}" ] || \             
             [ -z "${{ secrets.SEALED_SECRETS_KEY }}" ] || \
             [ -z "${{ secrets.OS_NAMESPACE }}" ]; then
            echo "::error::One or more required secrets (incl. TF_STATE_KEY) are missing."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq is available
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1
          terraform_wrapper: false

      - name: Configure OCI Credentials
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.oci"
          umask 077
          echo -e "${{ secrets.OCI_PRIVATE_KEY_PEM }}" > "$HOME/.oci/oci_api_key.pem"
          cat > "$HOME/.oci/config" <<CFG
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=$HOME/.oci/oci_api_key.pem
          CFG

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
            -backend-config="namespace=${{ secrets.OS_NAMESPACE }}" \
            -backend-config="region=${{ secrets.OCI_REGION }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan
      - name: Diagnose Terraform Input Variables
        run: |
          echo "TF_VAR_os_image_id = ${{ secrets.OS_IMAGE_ID }}"
          echo "TF_VAR_bastion_os_image_id = ${{ secrets.BASTION_IMAGE }}"
          echo "TF_VAR_availability_domain = ${{ secrets.AVAILABILITY_DOMAIN }}"
          # Add any other critical variables you want to inspect

      - name: Write plan metadata (commit + tf ver)
        run: |
          terraform version -json > .tfversion.json
          jq -n --arg sha "$GITHUB_SHA" \
                --slurpfile tv .tfversion.json \
                '{commit:$sha, terraform_version:($tv[0].terraform_version)}' > plan-meta.json

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            tfplan
            plan-meta.json
          if-no-files-found: error
