name: plan
on:
  workflow_dispatch: {}
  push:
    branches: [ main, master, development ]

permissions:
  contents: read

jobs:
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      TF_IN_AUTOMATION: "1"
      TF_INPUT: "0"
      TF_VAR_tenancy_ocid:        ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid:           ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint:         ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_region:              ${{ secrets.OCI_REGION }}
      TF_VAR_private_key_pem:     ${{ secrets.OCI_PRIVATE_KEY_PEM }}
      TF_VAR_compartment_ocid:    ${{ secrets.COMPARTMENT_OCID }}
      TF_VAR_availability_domain: ${{ secrets.AVAILABILITY_DOMAIN }}
      TF_VAR_os_image_id:         ${{ secrets.OS_IMAGE_ID }}
      TF_VAR_cluster_name:        ${{ secrets.CLUSTER_NAME }}
      TF_VAR_admin_cidrs:         ${{ secrets.ADMIN_CIDRS }}
      TF_VAR_cloudflare_cidrs:    ${{ secrets.CLOUDFLARE_CIDRS }}
      TF_VAR_public_key_content:  ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_tf_state_bucket:     ${{ secrets.TF_STATE_BUCKET }}
      TF_VAR_os_namespace:        ${{ secrets.OS_NAMESPACE }}
      TF_VAR_bastion_os_image_id: ${{ secrets.BASTION_IMAGE }}
      TF_VAR_manifests_repo_url:  ${{ secrets.MANIFESTS_REPO_URL }}
      SUPPRESS_LABEL_WARNING=True
    steps:
      - uses: actions/checkout@v4

      - name: Install Terraform 1.13.0
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0
          terraform_wrapper: false

      - name: Install OCI CLI and configure
        run: |
          set -euo pipefail
          python3 -m pip install --quiet --upgrade pip
          python3 -m pip install --quiet oci-cli
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          mkdir -p "$HOME/.oci"
          umask 077
          printf "%s" "${{ secrets.OCI_PRIVATE_KEY_PEM }}" > "$HOME/.oci/oci_api_key.pem"
          cat > "$HOME/.oci/config" <<CFG
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          key_file=$HOME/.oci/oci_api_key.pem
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          CFG

      - name: Compute namespace & state key
        run: |
          set -euo pipefail
          KEY="${{ secrets.TF_STATE_KEY }}"
          if [ -z "${KEY}" ]; then
            # fallback if TF_STATE_KEY not provided
            KEY="${GITHUB_REPOSITORY//\//-}/${GITHUB_REF_NAME//\//-}.tfstate"
          fi
          echo "TF_STATE_KEY=$KEY" >> "$GITHUB_ENV"

          NS="${{ secrets.OS_NAMESPACE }}"
          if [ -z "${NS}" ]; then
            NS="$(oci os ns get --query 'data' --raw-output)"
          fi
          echo "OS_NAMESPACE=$NS" >> "$GITHUB_ENV"

      - name: Ensure state bucket exists (idempotent)
        run: |
          set -euo pipefail
          NS="$OS_NAMESPACE"
          BUCKET="${{ secrets.TF_STATE_BUCKET }}"
          if ! oci os bucket get -ns "$NS" --name "$BUCKET" >/dev/null 2>&1; then
            oci os bucket create -ns "$NS" --name "$BUCKET" \
              --compartment-id "${{ secrets.COMPARTMENT_OCID }}" >/dev/null
          fi

      - name: Create backend.oci.hcl
        run: |
          cat > backend.oci.hcl <<HCL
          tenancy_ocid         = "${{ secrets.OCI_TENANCY_OCID }}"
          user_ocid            = "${{ secrets.OCI_USER_OCID }}"
          fingerprint          = "${{ secrets.OCI_FINGERPRINT }}"
          private_key          = "${{ secrets.OCI_PRIVATE_KEY_PEM }}"
          bucket               = "${{ secrets.TF_STATE_BUCKET }}"
          namespace            = "${OS_NAMESPACE}"
          region               = "${{ secrets.OCI_REGION }}"
          key                  = "${TF_STATE_KEY}"
          workspace_key_prefix = "envs/"
          HCL

      - name: Terraform init (OCI backend)
        run: terraform init -backend-config=backend.oci.hcl -reconfigure -input=false -upgrade

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan -out=tfplan -input=false -lock-timeout=5m

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
          if-no-files-found: error

      - name: Show plan (text)
        run: terraform show -no-color tfplan > plan.txt

      - name: Upload plan text
        uses: actions/upload-artifact@v4
        with:
          name: plan.txt
          path: plan.txt
