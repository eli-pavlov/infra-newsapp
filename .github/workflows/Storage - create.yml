name: STORAGE - Create / Import

on:
  workflow_dispatch:
    inputs:
      import_ocid:
        description: 'If provided, import this existing volume OCID instead of creating a new one'
        required: false
        default: ''
      storage_state_key:
        description: 'Backend state key to use for storage state (default: storage.state)'
        required: false
        default: ''
      availability_domain:
        description: 'Availability Domain (optional — falls back to secret AVAILABILITY_DOMAIN)'
        required: false
        default: ''
      compartment_ocid:
        description: 'Compartment OCID (optional — falls back to secret COMPARTMENT_OCID)'
        required: false
        default: ''
      volume_size_gb:
        description: 'Size in GB for new volume (used when creating)'
        required: false
        default: '30'

permissions:
  contents: read

jobs:
  storage_apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      TF_IN_AUTOMATION: "1"
      TF_INPUT: "0"

      # Backend + namespace
      TF_VAR_tf_state_bucket: ${{ secrets.TF_STATE_BUCKET }}
      TF_VAR_os_namespace:    ${{ secrets.OS_NAMESPACE }}
      TF_VAR_region:          ${{ secrets.OCI_REGION }}

      # PROVIDER variables expected by infra/storage/providers.tf
      TF_VAR_oci_tenancy_ocid:   ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_oci_user_ocid:      ${{ secrets.OCI_USER_OCID }}
      TF_VAR_oci_fingerprint:    ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_oci_private_key_pem: ${{ secrets.OCI_PRIVATE_KEY_PEM }}
      TF_VAR_oci_region:         ${{ secrets.OCI_REGION }}

      # Other useful defaults (optional)
      TF_VAR_compartment_ocid:   ${{ secrets.COMPARTMENT_OCID }}
    steps:
      - name: Guard required secrets (explicit checks)
        run: |
          set -euo pipefail
          missing=0
          # essential secrets required for provider + backend
          if [ -z "${{ secrets.OCI_TENANCY_OCID }}" ]; then echo "::error::Missing secret OCI_TENANCY_OCID"; missing=$((missing+1)); fi
          if [ -z "${{ secrets.OCI_USER_OCID }}" ];        then echo "::error::Missing secret OCI_USER_OCID"; missing=$((missing+1)); fi
          if [ -z "${{ secrets.OCI_FINGERPRINT }}" ];      then echo "::error::Missing secret OCI_FINGERPRINT"; missing=$((missing+1)); fi
          if [ -z "${{ secrets.OCI_PRIVATE_KEY_PEM }}" ];  then echo "::error::Missing secret OCI_PRIVATE_KEY_PEM"; missing=$((missing+1)); fi
          if [ -z "${{ secrets.OCI_REGION }}" ];           then echo "::error::Missing secret OCI_REGION"; missing=$((missing+1)); fi
          if [ -z "${{ secrets.TF_STATE_BUCKET }}" ];      then echo "::error::Missing secret TF_STATE_BUCKET"; missing=$((missing+1)); fi
          if [ -z "${{ secrets.OS_NAMESPACE }}" ];         then echo "::error::Missing secret OS_NAMESPACE"; missing=$((missing+1)); fi

          if [ "$missing" -gt 0 ]; then
            echo "One or more required secrets are missing. Aborting."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq is available
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1
          terraform_wrapper: false

      - name: Configure OCI Credentials
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.oci"
          umask 077
          echo "${{ secrets.OCI_PRIVATE_KEY_PEM }}" > "$HOME/.oci/oci_api_key.pem"
          cat > "$HOME/.oci/config" <<CFG
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=$HOME/.oci/oci_api_key.pem
          CFG

      - name: Determine backend key and import OCID (if present)
        working-directory: terraform/1-storage
        run: |
          set -euo pipefail

          # decide backend state key: input -> fall back to default 'storage.tfstate'
          STORAGE_STATE_KEY="${{ github.event.inputs.storage_state_key }}"
          if [ -z "$STORAGE_STATE_KEY" ]; then
            STORAGE_STATE_KEY="storage.tfstate"
          fi
          echo "Using storage state key: $STORAGE_STATE_KEY"

          # decide which OCID to import: prefer explicit input, else repository secret DB_STORAGE_OCID (may be empty)
          IMPORT_OCID="${{ github.event.inputs.import_ocid }}"
          if [ -z "$IMPORT_OCID" ]; then
            IMPORT_OCID="${{ secrets.DB_STORAGE_OCID }}" || true
          fi

          # Initialize the backend
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${STORAGE_STATE_KEY}" \
            -backend-config="namespace=${{ secrets.OS_NAMESPACE }}" \
            -backend-config="region=${{ secrets.OCI_REGION }}" \
            -reconfigure

          # If an OCID is available, try to import it into state unless it's already present
          if [ -n "${IMPORT_OCID:-}" ]; then
            echo "Found OCID to import: $IMPORT_OCID"

            # capture list of tracked resources (if any)
            state_list=$(terraform state list 2>/dev/null || true)
          if echo "$state_list" | grep -q -E '^module\.storage\.oci_core_volume\.db_volume$'; then
              echo "Resource oci_core_volume.db_volume already present in state — skipping import."
            else
              echo "Importing volume into state..."
              terraform import -lock=false module.storage.oci_core_volume.db_volume "$IMPORT_OCID" || {
                echo "::warning::Import failed or resource may already exist in state; continuing"
              }
            fi
          else
            echo "No OCID provided (input or DB_STORAGE_OCID secret). Plan will create resource if code requests it."
          fi

      - name: Terraform Validate
        working-directory: terraform/1-storage
        run: terraform validate

      - name: Terraform Plan (storage)
        working-directory: terraform/1-storage
        env:
          # per-invocation vars: fall back to repo secrets if inputs empty
          TF_VAR_availability_domain: ${{ github.event.inputs.availability_domain || secrets.AVAILABILITY_DOMAIN || '' }}
          TF_VAR_compartment_id: ${{ github.event.inputs.compartment_ocid || secrets.COMPARTMENT_OCID || '' }}
          TF_VAR_volume_size_gb: ${{ github.event.inputs.volume_size_gb }}
        run: terraform plan -out=tfplan -input=false

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: storage-tfplan
          path: terraform/1-storage/tfplan
          if-no-files-found: ignore

      - name: Terraform Apply (storage)
        working-directory: terraform/1-storage
        env:
          TF_VAR_availability_domain: ${{ github.event.inputs.availability_domain || secrets.AVAILABILITY_DOMAIN || '' }}
          TF_VAR_compartment_id: ${{ github.event.inputs.compartment_ocid || secrets.COMPARTMENT_OCID || '' }}
          TF_VAR_volume_size_gb: ${{ github.event.inputs.volume_size_gb }}
        run: |
          set -euo pipefail
          if [ -f tfplan ]; then
            terraform apply -auto-approve tfplan
          else
            terraform apply -auto-approve
          fi

      - name: Show resulting DB volume OCID
        working-directory: terraform/1-storage
        run: |
          set -euo pipefail
          # print output if available
          terraform output -raw db_storage_ocid || echo "db_storage_ocid not set in outputs"

      - name: Reminder to update repository secret
        run: |
          echo "If this run created a new volume, copy the 'db_storage_ocid' output above and set it as repository secret DB_STORAGE_OCID."
